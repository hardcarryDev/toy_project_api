generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("PRISMA_DB_URL")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model cart {
  id             String  @id @default(dbgenerated("(uuid())"))
  user_id        String?
  product_id     String?
  product_name   String?              @db.VarChar(50)   
  product_price  Int?                 @default(0)
  status         String?              @db.VarChar(10)
  create_dt      DateTime?            @default(now()) @db.DateTime(0)
  update_dt      DateTime?            @db.DateTime(0)
  delete_dt      DateTime?            @db.DateTime(0)
  member         member?              @relation(fields: [user_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "FK_member_TO_cart_1")
  product        product?             @relation(fields: [product_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "FK_product_TO_cart_1")

  @@index([user_id], map: "FK_member_TO_cart_1")
  @@index([product_id], map: "FK_product_TO_cart_1")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model member {
  id         String  @id @default(dbgenerated("(uuid())"))
  user_id    String               @db.VarChar(50)
  password   String               @db.VarChar(50)
  name       String?              @db.VarChar(100)
  gender     member_gender?
  age        Int?                 @db.TinyInt
  email      String?              @db.VarChar(50)
  phone      String?              @db.VarChar(50)
  grade      String?              @default("NORMAL") @db.VarChar(20)
  grade_id   String?
  create_dt  DateTime             @default(now()) @db.DateTime(0)
  update_dt  DateTime?            @db.DateTime(0)
  exit_dt    DateTime?            @db.DateTime(0)
  cart       cart[]
  order      order[]
  product_io product_io[]

}

model order {
  id              String @id @default(dbgenerated("(uuid())"))
  member_id       String
  req_name        String?             @db.VarChar(20)
  res_address     String?             @db.VarChar(100)
  res_phone       String?             @db.VarChar(20)
  res_requirement String?             @db.VarChar(100)
  total_price     Int?
  order_dt        DateTime            @default(now()) @db.DateTime(0)
  update_dt       DateTime?           @db.DateTime(0)
  order_cancel_dt DateTime?           @db.DateTime(0)
  member          member              @relation(fields: [member_id], references: [id], onUpdate: Restrict, map: "FK_member_TO_order_1")
  order_detail    order_detail[]
  product_io      product_io[]

  @@index([member_id], map: "FK_member_TO_order_1")
}

model order_detail {
  id             String @default(dbgenerated("(uuid())"))
  order_id       String
  product_id     String
  order_prod_cnt Int                 @default(0)
  order          order               @relation(fields: [order_id], references: [id], onUpdate: Restrict, map: "FK_order_TO_order_detail_1")
  product        product             @relation(fields: [product_id], references: [id], onUpdate: Restrict, map: "FK_product_TO_order_detail_1")

  @@id([id, order_id])
  @@index([order_id], map: "FK_order_TO_order_detail_1")
  @@index([product_id], map: "FK_product_TO_order_detail_1")
}

model product {
  id             String @id @default(dbgenerated("(uuid())"))
  name           String?             @db.VarChar(50)
  price          Int?
  category       String?             @db.VarChar(20)
  description    String?             @db.VarChar(50)
  company        String?             @db.VarChar(20)
  create_dt      DateTime?           @default(now()) @db.DateTime(0)
  update_dt      DateTime?           @db.DateTime(0)
  delete_dt      DateTime?           @db.DateTime(0)
  cart           cart[]
  order_detail   order_detail[]
  product_io     product_io[]
  product_review product_review[]
  stock          stock[]

}

model product_io {
  id         String  @default(dbgenerated("(uuid())"))
  prodcut_id String
  order_id   String?
  member_id  String?
  status     String?              @db.VarChar(10)
  amount     Int                  @default(0)
  member     member?              @relation(fields: [member_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "FK_member_TO_product_io_1")
  order      order?               @relation(fields: [order_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "FK_order_TO_product_io_1")
  product    product              @relation(fields: [prodcut_id], references: [id], onUpdate: Restrict, map: "FK_product_TO_product_io_1")

  @@id([id, prodcut_id])
  @@index([member_id], map: "FK_member_TO_product_io_1")
  @@index([order_id], map: "FK_order_TO_product_io_1")
  @@index([prodcut_id], map: "FK_product_TO_product_io_1")
}

model product_review {
  id           String @default(dbgenerated("(uuid())"))
  product_id   String
  content      String?             @db.Text
  attatch_file Bytes?              @db.Blob
  create_dt    DateTime?           @default(now()) @db.DateTime(0)
  update_dt    DateTime?           @db.DateTime(0)
  product      product             @relation(fields: [product_id], references: [id], onUpdate: Restrict, map: "FK_product_TO_product_review_1")

  @@id([id, product_id])
  @@index([product_id], map: "FK_product_TO_product_review_1")
}

model stock {
  id           String @default(dbgenerated("(uuid())"))
  product_id   String
  stock_amount Int?
  product      product             @relation(fields: [product_id], references: [id], onUpdate: Restrict, map: "FK_product_TO_stock_1")

  @@id([id, product_id])
  @@index([product_id], map: "FK_product_TO_stock_1")
}

enum member_gender {
  M
  W
}
